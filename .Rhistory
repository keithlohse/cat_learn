print(j)
for (i in 1:length(ES)){
df <- 2*n[j]-2
SE <- sqrt(2)*sqrt(var)/sqrt(n[j])
th <- qt((1-maxrisk),df)
tb <- qt(1-.76,df) # T for benefit, assuming 76% minimum chance benefit;
# tb_likely <- qt(1-0.75, df) #t-critical value for likely benefit threshold
# tb_possible <- qt(1-0.25, df) #t-critical value for possible benefit threshold
hterm <- -deltah+th*SE # implement equations from MSSE
bterm <- deltab-tb*SE
maxterm <- ((df)*n*(deltab+deltah)^2)/(2*var*(th+tb)^2)
pharmmax <- 1-pchisq(maxterm,(df))
pbenmax <- 1-pharmmax
Tharm <- (hterm-ES[i])/SE
Tben <- (bterm-ES[i])/SE
# Type I error for one-sided test in the positive direction;
sim_ppv$TypeIp[length(ES)*(j-1)+i] <- pharmmax*(1-pt(Tharm, df))+
pbenmax*(1-pt(Tben,df))
Tharm <- (hterm+ES[i])/SE
Tben <- (bterm+ES[i])/SE
# Current Sample Size
sim_ppv$sample_n[length(ES)*(j-1)+i]<-group_n
# Current Effect Size
sim_ppv$effect_size[length(ES)*(j-1)+i]<-ES[i]
# Current Prior ----
sim_ppv$pES[length(ES)*(j-1)+i] <-
pcauchy((ES[i]+.01),0,scale)-pcauchy((ES[i]),0,scale)
# Type I error for one-sided test in the negative direction;
sim_ppv$TypeIn[length(ES)*(j-1)+i] <- pharmmax*(1-pt(Tharm,df))+
pbenmax*(1-pt(Tben,df))
tbm2 <- pt(1-.75,df)
htermm2 <- -deltah+th*SE
btermm2 <- deltab-tbm2*SE
maxtermm2 <- ((df)*n*(deltab+deltah)^2)/(2*var*(th+tbm2)^2)
pharmmaxm2 <- 1-pchisq(maxtermm2,(df))
pbenmaxm2 <- 1-pharmmaxm2
Tharmm2 <- (htermm2-ES[i])/SE
Tbenm2 <- (btermm2-ES[i])/SE
sim_ppv$TypeIm2p[length(ES)*(j-1)+i] <- pharmmaxm2*(1-pt(Tharmm2,df))+
pbenmaxm2*(1-pt(Tbenm2,df))
Tharmm2 <- (htermm2+ES[i])/SE
Tbenm2 <- (btermm2+ES[i])/SE
sim_ppv$TypeIm2n[length(ES)*(j-1)+i] <- pharmmaxm2*(1-pt(Tharmm2,df))+
pbenmaxm2*(1-pt(Tbenm2,df))
}
}
head(sim_ppv, 101)
set.seed(429)
group<-c("A","B","A","B")
names<-c("joe","steve","kev","ted")
numbers<-c(rnorm(4,0,1))
x<-data.frame(names,numbers)
x
group<-c("A","B","A","B")
names<-c("joe","steve","kev","ted")
numbers<-c(rnorm(4,0,1))
x<-data.frame(names, numbers)
x
y<-data.frame(group, numbers)
y
x[order(numbers),]
y[order(numbers),]
group<-c(rep("A", 4),rep("B", 4))
group
names<-c("joe","steve","kev","ted", "jenna", "keith", "jim", "peter")
numbers<-c(rnorm(8,0,1))
x<-data.frame(names, numbers)
x
y<-data.frame(group, numbers)
y
x[order(numbers),]
y[order(numbers),]
group<-c(rep("A", 4),rep("B", 4))
numbers<-c(rnorm(8,0,1))
y<-data.frame(group, numbers)
y
y[order(numbers),]
group<-c(seq(1:6))
order<-c(seq(1:6))
numbers<-c(rnorm(6,0,1))
order<-c(seq(1:6))
numbers<-c(rnorm(6,0,1))
z<-data.frame(order, numbers)
z
y[order(numbers),]
z[order(numbers),]
order<-c(seq(1,2,4,5,6))
order<-c(1,2,4,5,6)
numbers<-c(rnorm(6,0,1))
z<-data.frame(order, numbers)
numbers<-c(rnorm(5,0,1))
z<-data.frame(order, numbers)
z
z[order(numbers),]
order<-c(1,5)
numbers<-c(rnorm(2,0,1))
# Keith Lohse
# 2019-04-29
# Adapted from Kristin Sainai (2019)
library("ggplot2"); library("car"); library("dplyr")
var <- .364; # true variance
# the specific value of 0.364 is from a pre-post design with r=.818.
# Std dev at baseline=1.0. Variance in change scores=1+1-2*.818=.364;
deltab <- 0.2 # threshold for benefit
deltah <- 0.2 # threshold for harm
maxrisk <- .05 # maximum risk of harm
scale <- 0.1 # scale of Cauchy distribution;
lowerES <- -1 # lowest possible effect size;
higherES <- 1 # highest possible effect size;
nhigh <- 60 #range of sample sizes desired;
# Generating a simulated data frame ----
n <- c(seq(from=6, to=60, by=1)) # Sample Size
ES<-c(seq(from=lowerES, to=higherES, by=0.01)) # Range of effect size
index<-c(seq(from =1, to=length(n)*length(ES), by=1))
sim_ppv<-data.frame(index)
# Simulating the different sample size by effect size combinations ----
for (j in 1:length(n)) {
group_n <- n[j]
print(j)
for (i in 1:length(ES)){
df <- 2*n[j]-2
SE <- sqrt(2)*sqrt(var)/sqrt(n[j])
th <- qt((1-maxrisk),df)
tb <- qt(1-.76,df) # T for benefit, assuming 76% minimum chance benefit;
# tb_likely <- qt(1-0.75, df) #t-critical value for likely benefit threshold
# tb_possible <- qt(1-0.25, df) #t-critical value for possible benefit threshold
hterm <- -deltah+th*SE # implement equations from MSSE
bterm <- deltab-tb*SE
maxterm <- ((df)*n*(deltab+deltah)^2)/(2*var*(th+tb)^2)
pharmmax <- 1-pchisq(maxterm,(df))
pbenmax <- 1-pharmmax
Tharm <- (hterm-ES[i])/SE
Tben <- (bterm-ES[i])/SE
# Current Sample Size
sim_ppv$sample_n[length(ES)*(j-1)+i]<-group_n
# Current Effect Size
sim_ppv$effect_size[length(ES)*(j-1)+i]<-ES[i]
# Current Prior ----
sim_ppv$pES[length(ES)*(j-1)+i] <-
pcauchy((ES[i]+.01),0,scale)-pcauchy((ES[i]),0,scale)
# Type I error for one-sided test in the positive direction;
sim_ppv$TypeIp[length(ES)*(j-1)+i] <- pharmmax*(1-pt(Tharm, df))+
pbenmax*(1-pt(Tben,df))
Tharm <- (hterm+ES[i])/SE
Tben <- (bterm+ES[i])/SE
# Type I error for one-sided test in the negative direction;
sim_ppv$TypeIn[length(ES)*(j-1)+i] <- pharmmax*(1-pt(Tharm,df))+
pbenmax*(1-pt(Tben,df))
tbm2 <- pt(1-.75,df)
htermm2 <- -deltah+th*SE
btermm2 <- deltab-tbm2*SE
maxtermm2 <- ((df)*n*(deltab+deltah)^2)/(2*var*(th+tbm2)^2)
pharmmaxm2 <- 1-pchisq(maxtermm2,(df))
pbenmaxm2 <- 1-pharmmaxm2
Tharmm2 <- (htermm2-ES[i])/SE
Tbenm2 <- (btermm2-ES[i])/SE
sim_ppv$TypeIm2p[length(ES)*(j-1)+i] <- pharmmaxm2*(1-pt(Tharmm2,df))+
pbenmaxm2*(1-pt(Tbenm2,df))
Tharmm2 <- (htermm2+ES[i])/SE
Tbenm2 <- (btermm2+ES[i])/SE
sim_ppv$TypeIm2n[length(ES)*(j-1)+i] <- pharmmaxm2*(1-pt(Tharmm2,df))+
pbenmaxm2*(1-pt(Tbenm2,df))
}
}
head(sim_ppv)
# set errors
sim_ppv$totalposMBI1=sim_ppv$pES*(sim_ppv$TypeIp) # MBI1=likely threshold
sim_ppv$totalposMBI2=sim_ppv$pES*(sim_ppv$TypeIm2p) # MBI2=possible threshold
sim_ppv$totalposMBI75=sim_ppv$totalposMBI1-sim_ppv$totalposMBI2;
for (i in 1:length(sim_ppv$index)) {
if (sim_ppv$effect_size[i]<=-0.2){
sim_ppv$falseposMBI1[i]<-sim_ppv$pES[i]*(sim_ppv$TypeIp[i])
sim_ppv$falseposMBI2[i]<-sim_ppv$pES[i]*(sim_ppv$TypeIm2p[i])
sim_ppv$falseposMBI75[i]<-sim_ppv$falseposMBI1[i]-sim_ppv$falseposMBI2
}
if (sim_ppv$effect_size[i]>-0.2 & sim_ppv$effect_size[i]<0.2){
sim_ppv$falseposMBI1[i]<-sim_ppv$pES[i]*(sim_ppv$TypeIp[i])
sim_ppv$falseposMBI2[i]<-sim_ppv$pES[i]*(sim_ppv$TypeIm2p[i])
sim_ppv$falseposMBI75[i]<-sim_ppv$falseposMBI1[i]-sim_ppv$falseposMBI2
}
}
# Overall Results
sum(sim_ppv$falseposMBI1)/sum(sim_ppv$totalposMBI1)*100
sum(sim_ppv$falseposMBI2)/sum(sim_ppv$totalposMBI2)*100
sum(sim_ppv$falseposMBI75)/sum(sim_ppv$totalposMBI75)*100
# By Sample Size
by_size <- sim_ppv %>%
group_by(sample_n) %>%
summarise(
MBIfdr = sum(falseposMBI1)/sum(totalposMBI1)*100,
MBI2fdr = sum(falseposMBI2)/sum(totalposMBI2)*100,
MBI75fdr = sum(falseposMBI75)/sum(totalposMBI75)*100
)
by_size$mbi75ppv <- 100-by_size$MBI75fdr
head(by_size)
plot(MBIfdr~sample_n, data=by_size, ylim=c(0,100))
points(MBI2fdr~sample_n, data=by_size, col="red")
plot(mbi75ppv~sample_n, data=by_size)
set.seed(17)
NoOfTrials <- 1000
# number of repeats in the simulation must be set high to get enough
# relevant MBI results, e.g., =75%;
var <- .364; # true variance
# the specific value of 0.364 is from a pre-post design with r=.818.
# Std dev at baseline=1.0. Variance in change scores=1+1-2*.818=.364;
deltab <- 0.2 # threshold for benefit
deltah <- 0.2 # threshold for harm
maxrisk <- .05 # maximum risk of harm
scale <- 0.1 # scale of Cauchy distribution;
lowerES <- -1 # lowest possible effect size;
higherES <- 1 # highest possible effect size;
nhigh <- 40 #range of sample sizes desired;
MBIProb <- 0.75 #The value of MBI for which you want a PPV,
# eg .75 will return all inferences between 75% and 76%;
int=.01 # size of the intervals for integration by parts;
# Generating a simulated data frame ----
n <- c(seq(from=36, to=nhigh, by=1)) # Sample Size
ES<-c(seq(from=lowerES, to=higherES, by=0.1)) # Range of effect size
Trial<-c(seq(from=1, to=NoOfTrials, by =1))
index<-c(seq(from =1, to=length(n)*length(ES)*length(Trial), by=1))
sim_ppv<-data.frame(index)
tt<-0
# Simulating the different sample size by effect size combinations ----
for (j in 1:length(n)) {
for (k in 1:length(ES)) {
for (l in 1:length(Trial)){
tt<-tt+1
print(tt)
SampleA<-rnorm(n=n[j], mean=0, sd=sqrt(var))
# change scores for pre-post study or abs value for cross-sectional study;
SampleB<-rnorm(n=n[j], mean=ES[k], sd=sqrt(var))
# change scores for pre-post study or abs value for cross-sectional study;
sim_ppv$ES[tt] <- ES[k]
sim_ppv$n_per_group[tt] <- n[j]
sim_ppv$groupA_mean[tt] <- mean(SampleA)
sim_ppv$groupB_mean[tt] <- mean(SampleB)
sim_ppv$groupA_sd[tt] <- sd(SampleA)
sim_ppv$groupB_sd[tt] <- sd(SampleB)
}
}
}
write.csv(sim_ppv, "./PPV.csv")
getwd()
setwd("~/GitHub/cat_learn/")
getwd()
# let's see what is in the data folder
list.files()
##  Create a new smaller dataframe, REST, PRE, PRAC ----------------------------
DATA <- read.csv("./data_MASTER.csv",
header = TRUE, sep=",",na.strings=c("","NA"))
head(DATA)
DATA$trial.c<-(DATA$trial-mean(DATA$trial))/10 #1-unit change = 10 trials
DATA$stim_cat<-factor(DATA$stim_cat)
DATA$resp_cat<-factor(DATA$resp_cat)
DATA$next_resp_same_cat<-factor(DATA$next_resp_same_cat)
DATA$prev_resp_same_cat<-factor(DATA$prev_resp_same_cat)
# Removing NAs for missed responses (1 exclusion)
DAT2<-subset(DATA, correct != "NA")
# Removing NAs for artifact rejection in the RewP (92 exclusions)
DAT2<-subset(DAT2, RewP != "NA")
## Removing statistical outliers in the data -----------------------------------
# Removing RewP Outliers ----
summary(DAT2$RewP)
sd(DAT2$RewP, na.rm=TRUE)
quantile(DAT2$RewP, c(0.01,0.50,0.99), na.rm=TRUE)
plot(density(DAT2$RewP))
DAT2<-subset(DAT2, RewP >= -50)
DAT2<-subset(DAT2, RewP <= 50)
plot(density(DAT2$RewP))
# Removal of outlying ESPN and FSPN values.
# Removing Encoding SPN Outliers ----
summary(DAT2$stim_SPN)
sd(DAT2$stim_SPN, na.rm=TRUE)
plot(density(DAT2$stim_SPN, na.rm=TRUE))
quantile(DAT2$stim_SPN, c(0.0005,0.50,0.9995), na.rm=TRUE)
DAT2<-subset(DAT2, stim_SPN >= -130)
DAT2<-subset(DAT2, stim_SPN <= 130)
plot(density(DAT2$stim_SPN, na.rm=TRUE))
# Removing Feedback SPN Outliers ----
summary(DAT2$fdbk_SPN)
sd(DAT2$fdbk_SPN, na.rm=TRUE)
plot(density(DAT2$fdbk_SPN, na.rm=TRUE))
quantile(DAT2$fdbk_SPN, c(0.0005,0.50,0.9995), na.rm=TRUE)
DAT2<-subset(DAT2, fdbk_SPN >= -196)
DAT2<-subset(DAT2, fdbk_SPN <= 196)
plot(density(DAT2$fdbk_SPN, na.rm=TRUE))
## Merging the acquistion data with the learning data --------------------------
LEARN <- read.csv("./data_POST_AVE.csv",
header = TRUE, sep=",",na.strings=c("","NA"))
head(LEARN)
# selecting the subset of columns we want (ignoring individual categories for now)
head(LEARN[c(1,2,8,14,15,21,27,28,29,30,36:46)])
LEARN2<-LEARN[c(1,2,8,14,15,21,27,28,29,30,36:46)]
COMB <- merge(DAT2, LEARN2, by ="subID")
head(COMB)
## -------------------------- Overall Analyses ---------------------------------
## ------------------------ Single Trial Analyses ------------------------------
## Improvement Over Time During Practice ---------------------------------------
## Does accuracy improve over time?
head(COMB)
COMB$hit_binom<-(COMB$hit+1)/2
COMB$sterile.c<-(as.numeric(COMB$acq_cond)-1.5)*2
summary(as.factor(COMB$sterile))
summary(COMB$trial.c)
contrasts(COMB$stim_cat)<-contr.poly(5)
p01<-glmer(hit_binom~
# Fixed-effects
1+sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat), data=COMB, family = binomial)
## Opening libraries -----------------------------------------------------------
library("ggplot2"); library("lme4"); library("lmerTest");library("dplyr");
library("car")
p01<-glmer(hit_binom~
# Fixed-effects
1+sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat), data=COMB, family = binomial)
summary(p01B)
p01B<-glmer(hit_binom~
# Fixed-effects
1+sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat), data=COMB, family = binomial)
p01<-glmer(hit_binom~
# Fixed-effects
1+stim_cat*sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|subID:stim_cat), data=COMB, family = binomial)
summary(p01B)
p01B<-glmer(hit_binom~
# Fixed-effects
1+sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=COMB, family = binomial)
summary(p01B)
p01<-glmer(hit_binom~
# Fixed-effects
1+stim_cat*sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|subID:stim_cat), data=COMB, family = binomial)
summary(p01)
anova(p01, p01B)
s01<-lmer(RewP~
# Fixed-effects
1+sterile.c*trial.c*hit*prev_resp_hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|subID:stim_cat), data=SEQ, REML=FALSE)
## Sequential Effects on the RewP -----------------------------------------------
head(COMB)
SEQ <- subset(COMB, prev_resp_hit != "NA")
summary(as.factor(SEQ$sterile.c))
summary(as.factor(SEQ$hit))
summary(as.factor(SEQ$prev_resp_hit))
s01<-lmer(RewP~
# Fixed-effects
1+sterile.c*trial.c*hit*prev_resp_hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|subID:stim_cat), data=SEQ, REML=FALSE)
summary(s01)
s01<-lmer(RewP~
# Fixed-effects
1+sterile.c*trial.c*hit*prev_resp_hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=SEQ, REML=FALSE)
summary(s01)
p01<-glmer(hit_binom~
# Fixed-effects
1+sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|subID:stim_cat), data=COMB, family = binomial)
anova(p01, p01B)
p01<-glmer(hit_binom~
# Fixed-effects
1+sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=COMB, family = binomial)
summary(p01)
## Aggregate RewP --------------------------------------------------------------
POST <- read.csv("./data_POST_LONG.csv",
header = TRUE, sep=",",na.strings=c("","NA"))
POST$sterile.c<-(as.numeric(POST$acq_cond)-1.5)*2
head(POST)
AVE<-subset(POST, post_cond=="game" & rotated=="-1")
AVE<-subset(AVE, RewP_diff_Windows!="NA")
summary(AVE$RewP_diff_Windows)
m02<-lm(RewP_diff_Windows~sterile.c, data=AVE)
summary(m02)
anova(m02)
t.test(RewP_diff_Windows~acq_cond, data=AVE, paired=FALSE, var.equal=TRUE)
## Primary Analysis: Engagement --------------------------------------------------
head(AVE)
m05<-lm(eng_total~acq_cond, data=AVE)
summary(m05)
t.test(eng_total~acq_cond, data=AVE ,var.equal=TRUE)
## Practice Performance as a funciton of RewP ----------------------------------
head(LEARN)
LEARN$sterile.c<-(as.numeric(LEARN$acq_cond)-1.5)*2
m00a<-lm(sqrt(acq_total)~sterile.c+RewP_diff_Windows, data=LEARN)
summary(m00a)
#plot(m00b)
summary(LEARN$acq_cond)
m00b<-lm(sqrt(acq_total)~sterile.c+RewP_hit_ave_Windows+RewP_miss_ave_Windows,
data=LEARN)
summary(m00b)
## Figure 3: Plot of Accuracy over Time by Category ----------------------------
labels <- c(game = "Game Group", sterile = "Sterile Group")
ggplot(data = COMB,
mapping = aes(x = trial, y = hit_binom)) +
geom_jitter(aes(fill=stim_cat), pch=21, size= 2, height=0.01) +
stat_smooth(aes(color=stim_cat, lty=stim_cat), lwd=1.5, method="lm", se=FALSE)+
facet_wrap(~acq_cond, labeller=labeller(acq_cond=labels))+
scale_x_continuous(name = "Trial Number") +
scale_y_continuous(name = "Proportion Correct")+
scale_linetype_manual(name="Stimulus Category",
breaks=c("1", "2", "3", "4", "5"),
labels=c("Cat 1", "Cat 2", "Cat 3", "Cat 4", "Cat 5"),
values = c(1,2,4,5,6))+
scale_fill_manual(name="Stimulus Category",
breaks=c("1", "2", "3", "4", "5"),
labels=c("Cat 1", "Cat 2", "Cat 3", "Cat 4", "Cat 5"),
values = c("black", "grey20", "grey30", "grey40", "grey50"))+
scale_color_manual(name="Stimulus Category",
breaks=c("1", "2", "3", "4", "5"),
labels=c("Cat 1", "Cat 2", "Cat 3", "Cat 4", "Cat 5"),
values = c("black", "grey20", "grey30", "grey40", "grey50"))+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=16),
legend.title=element_text(size=16,face="bold"),
strip.text = element_text(size=16, face="bold"),
legend.position = "bottom")
## Sequential Effects on the RewP -----------------------------------------------
head(COMB)
SEQ <- subset(COMB, prev_resp_hit != "NA")
summary(as.factor(SEQ$sterile.c))
summary(as.factor(SEQ$hit))
summary(as.factor(SEQ$prev_resp_hit))
s01<-lmer(RewP~
# Fixed-effects
1+sterile.c*trial.c*hit*prev_resp_hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=SEQ, REML=FALSE)
summary(s01)
## Retaining or Changing Responses ---------------------------------------------
## Does RewP predict keeping the same response or changing your response
# the next time you see a stimulus of the same category:
NEXT<-subset(COMB, next_cat_change != "NA")
head(NEXT)
summary(NEXT$next_cat_change)
summary(NEXT$RewP)
NEXT$RewP.c<-NEXT$RewP-mean(NEXT$RewP)
summary(NEXT$RewP.c)
summary(as.factor(NEXT$hit))
summary(as.factor(NEXT$sterile.c))
n01<-glmer(next_cat_change~
# Fixed-effects
1+sterile.c*trial.c*RewP.c*hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=NEXT, family = binomial)
summary(n01)
n01<-glmer(next_cat_change~
# Fixed-effects
1+sterile.c*trial.c*RewP.c*hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat), data=NEXT, family = binomial)
summary(n01)
n01<-glmer(next_cat_change~
# Fixed-effects
1+sterile.c*trial.c*RewP.c*hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=NEXT, family = binomial)
summary(n01)
n01<-glmer(next_cat_change~
# Fixed-effects
1+sterile.c*trial.c*RewP.c*hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=NEXT, family = binomial)
s01<-lmer(RewP~
# Fixed-effects
1+sterile.c*trial.c*hit*prev_resp_hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=SEQ, REML=FALSE)
summary(s01)
p01<-glmer(hit_binom~
# Fixed-effects
1+sterile.c*trial.c+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=COMB, family = binomial)
summary(p01)
Anova(p01, type=c("III"))
summary(p01)
summary(s01)
Anova(s01, type=c("III"))
## Retaining or Changing Responses ---------------------------------------------
## Does RewP predict keeping the same response or changing your response
# the next time you see a stimulus of the same category:
NEXT<-subset(COMB, next_cat_change != "NA")
head(NEXT)
summary(NEXT$next_cat_change)
summary(NEXT$RewP)
NEXT$RewP.c<-NEXT$RewP-mean(NEXT$RewP)
summary(NEXT$RewP.c)
summary(as.factor(NEXT$hit))
summary(as.factor(NEXT$sterile.c))
n01<-glmer(next_cat_change~
# Fixed-effects
1+sterile.c*trial.c*RewP.c*hit+ # adding in interaction
# Random-effects
(1+trial.c|subID)+(1|stim_cat)+(1|subID:stim_cat), data=NEXT, family = binomial)
summary(n01)
Anova(n01, type=c("III"))
